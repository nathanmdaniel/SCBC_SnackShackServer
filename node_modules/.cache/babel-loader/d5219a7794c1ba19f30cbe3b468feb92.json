{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MenuList from '@material-ui/core/MenuList';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Input from '@material-ui/core/Input';\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (e) {\n      var suggestions = _this.props.getNames();\n\n      console.log(suggestions);\n      var userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      var filteredSuggestions = suggestions.filter(function (suggestion) {\n        return suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n      }); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      // Update the user input and reset the rest of the state\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    });\n\n    _this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n    return _this;\n  } // Event fired when the input value is changed\n\n\n  _createClass(Autocomplete, [{\n    key: \"render\",\n    value: function render() {\n      var onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown,\n          _this$state = this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          filteredSuggestions = _this$state.filteredSuggestions,\n          showSuggestions = _this$state.showSuggestions,\n          userInput = _this$state.userInput;\n      var suggestionsListComponent;\n\n      if (showSuggestions && userInput) {\n        if (filteredSuggestions.length) {\n          suggestionsListComponent = React.createElement(MenuList, null, filteredSuggestions.map(function (suggestion, index) {\n            var className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return React.createElement(MenuItem, {\n              className: className,\n              key: suggestion,\n              onClick: onClick\n            }, suggestion);\n          }));\n        } else {\n          suggestionsListComponent = React.createElement(\"div\", null);\n        }\n      }\n\n      return React.createElement(Fragment, null, React.createElement(Input, {\n        placeholder: \"Camper Name\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput\n      }), suggestionsListComponent);\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\n_defineProperty(Autocomplete, \"propTypes\", {\n  suggestions: PropTypes.instanceOf(Array)\n});\n\n_defineProperty(Autocomplete, \"defaultProps\", {\n  suggestions: []\n});\n\nexport default Autocomplete;","map":{"version":3,"sources":["C:\\cs_projects\\SCBC_SnackShackServer\\pages\\Accounts\\Autocomplete.js"],"names":["React","Component","Fragment","PropTypes","MenuList","MenuItem","Input","Autocomplete","props","e","suggestions","getNames","console","log","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","innerText","state","onChange","onClick","onKeyDown","suggestionsListComponent","length","map","index","className","instanceOf","Array"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array)\r\n    };\r\n\r\n    static defaultProps = {\r\n        suggestions: []\r\n    };\r\n\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                // The active selection's index\r\n                activeSuggestion: 0,\r\n                // The suggestions that match the user's input\r\n                filteredSuggestions: [],\r\n                // Whether or not the suggestion list is shown\r\n                showSuggestions: false,\r\n                // What the user has entered\r\n                userInput: \"\"\r\n            };\r\n        }\r\n\r\n        // Event fired when the input value is changed\r\n        onChange = e => {\r\n            const suggestions = this.props.getNames();\r\n            console.log(suggestions);\r\n            const userInput = e.currentTarget.value;\r\n\r\n            // Filter our suggestions that don't contain the user's input\r\n            const filteredSuggestions = suggestions.filter(\r\n              suggestion =>\r\n                  suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n            );\r\n\r\n            // Update the user input and filtered suggestions, reset the active\r\n            // suggestion and make sure the suggestions are shown\r\n            this.setState({\r\n                activeSuggestion: 0,\r\n                filteredSuggestions,\r\n                showSuggestions: true,\r\n                userInput: e.currentTarget.value\r\n            });\r\n        };\r\n\r\n        // Event fired when the user clicks on a suggestion\r\n        onClick = e => {\r\n            // Update the user input and reset the rest of the state\r\n            this.setState({\r\n                activeSuggestion: 0,\r\n                filteredSuggestions: [],\r\n                showSuggestions: false,\r\n                userInput: e.currentTarget.innerText\r\n            });\r\n        };\r\n\r\n        render() {\r\n            const {\r\n                onChange,\r\n                onClick,\r\n                onKeyDown,\r\n                state: {\r\n                    activeSuggestion,\r\n                    filteredSuggestions,\r\n                    showSuggestions,\r\n                    userInput\r\n                }\r\n            } = this;\r\n\r\n            let suggestionsListComponent;\r\n\r\n            if (showSuggestions && userInput) {\r\n                if (filteredSuggestions.length) {\r\n                    suggestionsListComponent = (\r\n                      <MenuList>\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion) {\r\n                                className = \"suggestion-active\";\r\n                            }\r\n\r\n                            return (\r\n                              <MenuItem\r\n                                className={className}\r\n                              key={suggestion}\r\n                    onClick={onClick}\r\n                  >\r\n                    {suggestion}\r\n                  </MenuItem>\r\n                        );\r\n                })}\r\n            </MenuList>\r\n              );\r\n        } else {\r\n          suggestionsListComponent = (\r\n            <div/>\r\n          );\r\n    }\r\n}\r\n\r\nreturn (\r\n  <Fragment>\r\n    <Input\r\n      placeholder=\"Camper Name\"\r\n      onChange={onChange}\r\n      onKeyDown={onKeyDown}\r\n      value={userInput}\r\n    />\r\n{suggestionsListComponent}\r\n  </Fragment>\r\n    );\r\n}\r\n}\r\n\r\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}