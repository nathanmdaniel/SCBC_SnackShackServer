{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport XLSX from 'xlsx';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nvar FrozenButtons =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FrozenButtons, _React$Component);\n\n  function FrozenButtons(props) {\n    var _this;\n\n    _classCallCheck(this, FrozenButtons);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FrozenButtons).call(this, props));\n    _this.genButtons = _this.genButtons.bind(_assertThisInitialized(_this));\n    _this.state = {\n      buttArr: _this.genButtons()\n    };\n    return _this;\n  }\n\n  _createClass(FrozenButtons, [{\n    key: \"genButtons\",\n    value: function genButtons() {\n      var XLSX = require('xlsx'); //var path = require('./SampleInventory.xlsx');\n      //console.log(path);\n      //var workbook = XLSX.readFile('./SampleInventory.xlsx');\n      //console.log(workbook);\n\n\n      var arr = [];\n\n      for (var i = 0; i < 10; ++i) {\n        arr.push(React.createElement(Button, {\n          style: {\n            backgroundColor: \"#42a5f5\",\n            color: '#faebd7'\n          },\n          variant: \"contained\",\n          size: \"large\",\n          onClick: this.props.addChip.bind(this, \"Flav-or-Ice\", 0.75)\n        }, \" Frozen\"));\n      }\n\n      return arr;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var arr = [];\n      var data = null;\n      var url = 'http://localhost:3001/FrozenJson';\n      fetch(url).then(function (response) {\n        return response.json();\n      }).then(function (myJson) {\n        data = myJson;\n        data.forEach(function (info) {\n          var thisButton = React.createElement(Button, {\n            style: {\n              backgroundColor: \"#42a5f5\",\n              color: '#faebd7',\n              fontWeight: 'bold'\n            },\n            variant: \"contained\",\n            onClick: _this2.props.addChip.bind(_this2, info.Name, info.UnitPrice),\n            size: \"large\"\n          }, info.Name);\n          arr.push(thisButton);\n        });\n\n        _this2.setState({\n          buttArr: arr\n        });\n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var disp = this.state.buttArr ? this.state.buttArr.map(function (button) {\n        return React.createElement(\"div\", {\n          style: {\n            padding: 5\n          }\n        }, \" \", button, \" \");\n      }) : React.createElement(\"div\", null);\n      return React.createElement(\"div\", {\n        style: {\n          padding: 20\n        }\n      }, React.createElement(Grid, {\n        container: true\n      }, disp));\n    }\n  }]);\n\n  return FrozenButtons;\n}(React.Component);\n\nexport default FrozenButtons;","map":{"version":3,"sources":["C:\\cs_projects\\SCBC_SnackShackServer\\pages\\Register\\RegisterButtonSide\\CategorizedButtons\\FrozenButtons.js"],"names":["React","XLSX","Button","Grid","FrozenButtons","props","genButtons","bind","state","buttArr","require","arr","i","push","backgroundColor","color","addChip","data","url","fetch","then","response","json","myJson","forEach","info","thisButton","fontWeight","Name","UnitPrice","setState","catch","error","console","disp","map","button","padding","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport XLSX from 'xlsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\n    class FrozenButtons extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            this.genButtons = this.genButtons.bind(this);\r\n            this.state = {\r\n                buttArr: this.genButtons(),\r\n            };\r\n        }\r\n\r\n        genButtons() {\r\n            const XLSX = require('xlsx');\r\n            //var path = require('./SampleInventory.xlsx');\r\n            //console.log(path);\r\n            //var workbook = XLSX.readFile('./SampleInventory.xlsx');\r\n            //console.log(workbook);\r\n            var arr = [];\r\n            for (var i = 0; i < 10; ++i)\r\n                arr.push(<Button\r\n\t\t\tstyle={{backgroundColor: \"#42a5f5\", color: '#faebd7'}}\r\n    variant='contained'\r\n    size='large'\r\n    onClick={this.props.addChip.bind(this, \"Flav-or-Ice\", 0.75)}\r\n    > Frozen</Button>);\r\n    return arr;\r\n    }\r\n\r\n    componentDidMount() {\r\n        var arr = [];\r\n        var data = null;\r\n        var url = 'http://localhost:3001/FrozenJson'\r\n        fetch(url).then(response => {\r\n            return response.json();\r\n        })\r\n        .then(myJson => {\r\n            data = myJson;\r\n            data.forEach(info =>{\r\n                var thisButton = <Button \r\n                style={{backgroundColor: \"#42a5f5\", color: '#faebd7', fontWeight: 'bold'}} \r\n                variant='contained'\r\n                onClick={this.props.addChip.bind(this, info.Name, info.UnitPrice)}\r\n                size='large'>{info.Name}</Button>;\r\n        arr.push(thisButton);\r\n    })\r\n        this.setState({buttArr: arr});     \r\n    })\r\n    .catch((error) => {\r\n        console.error(error);\r\n    });\r\n    }\r\n\r\n    render() {\r\n        var disp = this.state.buttArr ? this.state.buttArr.map(button => <div style={{ padding: 5}}> {button} </div>) : <div/>;\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n       <Grid container>\r\n         {disp}\r\n       </Grid>\r\n     </div>\r\n\t\t);\r\n    }\r\n}\r\n\r\n\r\nexport default FrozenButtons;"]},"metadata":{},"sourceType":"module"}